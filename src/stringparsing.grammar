@top Document { scriptOrWord }

scriptOrWord { (word | script)+ }

script { ( controlWords | comments | commands | lookupFunctions | utilityFunctions | math | variables ) }

//__________ Control / Logic

controlWords[@isGroup=control] {
  If | Case | End | OneOf
}

If {
  "[if" IfTest "]" IfTrue
  ("[else if" IfTest "]" IfTrue)*
  ("[else]" IfFalse)? "[end if]"
}
IfTest[@isGroup=comparison] { scriptOrWord }
IfTrue { scriptOrWord }
IfFalse { scriptOrWord }

Case {
  "[case " CaseStatement "]"
  CaseWhen+
  "[end case]"
}
CaseStatement[@isGroup=comparison] { scriptOrWord }
CaseWhen[@isGroup=control] { "[when " CaseWhenTest "]" CaseWhenTrue "[end when]" }
CaseWhenTest[@isGroup=comparison] { scriptOrWord }
CaseWhenTrue { scriptOrWord }

OneOf { "[one of]" (scriptOrWord "[or]")+ scriptOrWord
       ( "[at random]" | "[with odds: " scriptOrWord "]")  }


// End block, for multiline?
End { "[end]" }

//__________ Math

math[@isGroup=math] { Addition | Subtraction | Multiplication | Division | Modulo | Power | Min | Max }

Addition       { "[+ " scriptOrWord " +]" }
Subtraction    { "[- " scriptOrWord " -]" }
Multiplication { "[* " scriptOrWord " *]" }
Division       { "[/ " scriptOrWord " /]" }
Modulo         { "[% " scriptOrWord " %]" }
Power          { "[^ " scriptOrWord " ^]" }
Min            { "[< " scriptOrWord " <]" }
Max            { "[> " scriptOrWord " >]" }

//__________ Comments

comments[@isGroup=comment] { Comment | Description }

Comment { "[comment=" matchUntilNextCloseScript "]" }
Description { "[description="  matchUntilNextCloseScript "]" }

//__________ Lookup functions

lookupFunctions[@isGroup=lookup] {
  PlayerName | LookerName | VictorName | LoserName | OwnerName | HereName | CommandName | SkinShortDescription | CockShortDescription | CuntShortDescription | PresentArea | EnvironmentHeat | EnvironmentCold | EnvironmentWater | EnvironmentNanite | PronounOf | SizeOf | SkinOf | CockOf | CuntOf | LengthOf | FormattedLengthOf | NumberOf | DailyCumOf | DailyMilkOf | AdjectiveSizeOf | DescriptionPartOf | TransformDescriptionPartOf | HpOf | InfectionPartsOf | StatusMagnitudeOf | StatOf | LocalStatOf | AccountStatOf | FeralModeOf | CityStat | WeatherValue | MoonPhase
}

// Simple lookups with no parameters
PlayerName { "[player]" }
LookerName { "[looker]" }
VictorName { "[victor]" }
LoserName { "[loser]" }
OwnerName { "[owner]" }
HereName { "[here]" }
CommandName { "[command]" }
SkinShortDescription { "[skin]" }
CockShortDescription { "[cock]" }
CuntShortDescription { "[cunt]" }
PresentArea { "[area]" }
EnvironmentHeat { "[heat]" }
EnvironmentCold { "[cold]" }
EnvironmentWater { "[water]" }
EnvironmentNanite { "[nanite]" }

// Lookups with parameters
PronounOf { pronounOfStart kw<'of'> validTargets "]" }
SizeOf { "[size of " validTargets "]" }
SkinOf { "[skin of " validTargets "]" }
CockOf { "[cock of " validTargets "]" }
CuntOf { "[cunt of " validTargets "]" }
LengthOf { lengthOfStart kw<'of'> validTargets "]" }
FormattedLengthOf { "[formatted " allBodyParts kw<'length'> kw<'of'> validTargets "]" }
NumberOf { "[number of " allBodyParts "s" kw<'of'> validTargets "]" }
DailyCumOf { "[daily cum amount of " validTargets "]" }
DailyMilkOf { "[daily milk amount of " validTargets "]" }
AdjectiveSizeOf { adjectiveSizeOfStart kw<'size'> kw<'of'>  validTargets "]" }
DescriptionPartOf { "[desc " mutableBodyParts kw<'of'> scriptOrWord "]" }
TransformDescriptionPartOf { "[transform " mutableBodyParts kw<'of'> scriptOrWord "]" }
HpOf { "[hp of " validTargets "]" }
InfectionPartsOf {"[the infection " scriptOrWord kw<'of'> validTargets "]" }
StatusMagnitudeOf { "[status " scriptOrWord kw<'of'> validTargets "]" }
StatOf { "[stat " scriptOrWord kw<'of'> validTargets "]" }
LocalStatOf { "[lstat " scriptOrWord kw<'of'> validTargets "]" }
AccountStatOf { "[account stat " scriptOrWord "]" }
FeralModeOf { "[feral mode of " validTargets "]" }
CityStat { "[city stat " scriptOrWord "]" }
WeatherValue { "[weather " ( "id" | "dt" | "name" | "coord-lat" | "coord-lon" | "sys-country" | "sys-sunrise" | "sys-sunset" | "main-temp" | "main-temp_min" | "main-temp_max" | "main-pressure" | "main-sea_level" | "main-grnd_level" | "wind-speed" | "wind-deg" | "wind-gust" | "clouds-all" | "weather-id" | "weather-main" | "weather-description" | "weather-icon" | "rain-1h" | "rain-3h" | "snow-1h" | "snow-3h" ) "]"  }
MoonPhase { "[moon phase" kw<'capitalized'>? "]" }

//__________ Utilities

utilityFunctions[@isGroup=lookup] {
  LowerCase | UpperCase | PresentYear | PresentMonth | PresentDay | PresentWeekday | PresentHour | PresentMinute | PresentTimestamp | RandomNumber
}

LowerCase { "[lowercase " scriptOrWord "]" }
UpperCase { "[uppercase " scriptOrWord "]" }
RandomNumber { "[random " scriptOrWord kw<'to'> scriptOrWord "]" }
PresentYear { "[year]" }
PresentMonth { "[month]" }
PresentDay { "[day]" }
PresentWeekday { "[weekday]" }
PresentHour { "[hour]" }
PresentMinute { "[minute]" }
PresentTimestamp { "[systime]" }

//__________ Variables

variables[@isGroup=variable] {
  ReadVariable | WriteVariable
}

WriteVariable { "[var write " scriptOrWord kw<'to'> scriptOrWord "]" }
ReadVariable { "[var read " scriptOrWord "]" }

//__________ Commands

commands[@isGroup=command] {
  IncreaseStat | Kill | SetStat | SetStatus | Impregnate | FillPart | TalkScript
}

SetStat { "[set the" scriptOrWord kw<'of'> Target kw<'to'> scriptOrWord "]" }
SetStatus { "[set" scriptOrWord kw<'status'> kw<'of'> Target kw<'to'> scriptOrWord kw<'mag'> kw<'for'> scriptOrWord " rounds]" }
IncreaseStat { "[increase the " scriptOrWord kw<'of'> Target kw<'by'> scriptOrWord "]" }
Kill { "[kill " scriptOrWord "]" }
Impregnate { "[impregnate " Target kw<'with'> Target "]" }
FillPart { "[fill the " fillableBodyParts kw<'of'> Target kw<'by'> scriptOrWord "]" }
TalkScript { "[talk " scriptOrWord kw<'of'> Target "]" }

//__________ Parameters
validTargets { ( Player | Looker | Victor | Loser ) | scriptOrWord }
Player[@isGroup=parameter] { kw<"player"> }
Looker[@isGroup=parameter] { kw<"looker"> }
Victor[@isGroup=parameter] { kw<"victor"> }
Loser[@isGroup=parameter] { kw<"loser"> }

Target[@isGroup=parameter] { validTargets }

@skip { whitespace }

//Because we're inside regular text, none of the keywords are specialized, so using extend instead.
kw<term> { @extend[@name={term}]<word, term> }

@tokens {
  whitespace { $[ \n] }
  word { char+ }

  // [ and ] (x5b and x5d) are reserved
  char { $[\x21-\x5a\x5c\x5e-\x7f] }

  matchUntilNextCloseScript { ![\]\n ]+ } // For comment blocks
  
  //These ones get a token so they don't match with a single [
  lengthOfStart { "[" allBodyParts " length" }
  adjectiveSizeOfStart { "[" ( "breast" | "cock" | "cunt" ) }

  //Pronounces get a token to avoid confusing them with math.modulo
  pronounOfStart { "[%" ('a' | 'A' | 's'| 'S'| 'o'| 'O'| 'p'| 'P'| 'r'| 'R') }

  allBodyParts { "torso" | "head" | "arm" | "leg" | "foot" | "hand" | "wing" | "tail" | "cock" | "cunt" | "ball" | "breast" | "clit" | "udder" | "teat" }
  mutableBodyParts { "arms" | "ass" | "head" | "legs" | "skin" | "torso" | "cock"}
  fillableBodyParts { "ass" | "balls" | "bladder" | "breasts" | "foot" | "hand" | "mouth" | "nipple" }
}

@external propSource stringParsingHighlighting from "./highlight"

@detectDelim