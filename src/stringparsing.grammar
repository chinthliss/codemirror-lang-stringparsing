@top StringParsing { (validCharacter | whitespace | script)* }

script {
  function | math | command | comment
}

function[@isGroup=function] {
  PlayerName | LookerName | VictorName | LoserName | OwnerName | HereName | CommandName | SkinShortDescription | CockShortDescription | CuntShortDescription | PronounOf | SizeOf | SkinOf | CockOf | CuntOf | LengthOf | FormattedLengthOf | NumberOf | DailyCumOf | DailyMilkOf | AdjectiveSizeOf | DescriptionPartOf | TransformDescriptionPartOf | HpOf | InfectionPartsOf | StatusMagnitudeOf | EnvironmentModifier | CityStat | DateTime | MoonPhase | PresentArea | WeatherValue | End | LocalStatOf | AccountStatOf | StatOf
}

// Math
math[@isGroup=math] { Addition | Subtraction | Multiplication | Division | Modulo | Power | Min | Max }

Addition { additionStart (NumberOrScript " ")+ additionEnd }
Subtraction { subtractionStart (NumberOrScript " ")+ subtractionEnd }
Multiplication { multiplicationStart (NumberOrScript " ")+ multiplicationEnd }
Division { divisionStart (NumberOrScript " ")+ divisionEnd }
Modulo { moduloStart (NumberOrScript " ")+ moduloEnd }
Power { powerStart (NumberOrScript " ")+ powerEnd }
Min { minStart (NumberOrScript " ")+ minEnd }
Max { maxStart (NumberOrScript " ")+ maxEnd }

// Comments / Descriptions
comment[@isGroup=comment] { Comment | Description }

Comment { commentStart matchUntilNextCloseScript closeScript }
Description { descriptionStart matchUntilNextCloseScript closeScript }

// Commands
command[@isGroup=command] { IncreaseStat | Kill | SetStat | SetStatus | Impregnate | FillPart | TalkScript }
SetStat { setStatStart Text of Target to NumberOrScript closeScript }
SetStatus { setStatusStart Text " status" of Target to NumberOrScript " mag for " Number " rounds" closeScript }
IncreaseStat { increaseStatStart Text of Target by Number closeScript }
Kill { killStart Text closeScript }
Impregnate { impregnateStart Target " with " Target }
FillPart { fillPartStart FillableBodyPart " of " Target by Number closeScript }
TalkScript { talkScriptStart Text of Target closeScript }

// Parameters (Mostly for highlighting)
Text[@isGroup=parameter] { textWithSpaces }
Target[@isGroup=parameter] { validTargets }
NumberOrScript[@isGroup=parameter] { (number+ | script) }
Number[@isGroup=parameter] { number+ }
FillableBodyPart[@isGroup=parameter] { fillableBodyParts }

@tokens {
  // Single word things
  PlayerName { openScript "player" closeScript }
  LookerName { openScript "looker" closeScript }
  VictorName { openScript "victor" closeScript }
  LoserName { openScript "loser" closeScript }
  OwnerName { openScript "owner" closeScript }
  HereName { openScript "here" closeScript }
  CommandName { openScript "command" closeScript }
  SkinShortDescription { openScript "skin" closeScript }
  CockShortDescription { openScript "cock" closeScript }
  CuntShortDescription { openScript "cunt" closeScript }
  End { openScript "end" closeScript }

  // Targeted lookups
  PronounOf { openScript "%" $[aAsSoOpPrR] of validTargets closeScript }
  SizeOf { openScript "size" of validTargets closeScript }
  SkinOf { openScript "skin" of validTargets closeScript }
  CockOf { openScript "cock" of validTargets closeScript }
  CuntOf { openScript "cunt" of validTargets closeScript }
  LengthOf { openScript allBodyParts " length" of validTargets closeScript }
  FormattedLengthOf { openScript "formatted " allBodyParts " length" of validTargets closeScript }
  NumberOf { openScript "number of " allBodyParts "s of " validTargets closeScript }
  DailyCumOf { openScript "daily cum amount of " validTargets closeScript }
  DailyMilkOf { openScript "daily milk amount of " validTargets closeScript }
  AdjectiveSizeOf { openScript ( "breast" | "cock" | "cunt" ) " size" of  validTargets closeScript }
  DescriptionPartOf { openScript "desc " mutableBodyParts of textWithSpaces closeScript }
  TransformDescriptionPartOf { openScript "transform " mutableBodyParts of textWithSpaces closeScript }
  HpOf { openScript "hp" of validTargets closeScript }
  InfectionPartsOf { openScript "the infection " textWithSpaces of validTargets closeScript }
  StatusMagnitudeOf { openScript "status " textWithSpaces of validTargets closeScript }
  StatOf { openScript "stat " textWithSpaces of validTargets closeScript }
  LocalStatOf { openScript "lstat " textWithSpaces of validTargets closeScript }
  AccountStatOf { openScript "account stat " textWithSpaces closeScript }

  @precedence { DescriptionPartOf, TransformDescriptionPartOf, CityStat, AccountStatOf, validCharacter }

  @precedence { of, by, closeScript, textWithSpaces }

  // Other functions
  EnvironmentModifier { openScript ( "heat" | "cold" | "water" | "nanite" ) closeScript }
  CityStat { openScript "city stat " textWithSpaces closeScript }
  PresentArea { openScript "area" closeScript }
  DateTime { openScript ( "year" | "month" | "day" | "weekday" | "hour" | "minute" | "systime" ) closeScript }
  MoonPhase { openScript "moon phase" " capitalized"? closeScript }
  WeatherValue { openScript "weather " ( "id" | "dt" | "name" | "coord-lat" | "coord-lon" | "sys-country" | "sys-sunrise" | "sys-sunset" | "main-temp" | "main-temp_min" | "main-temp_max" | "main-pressure" | "main-sea_level" | "main-grnd_level" | "wind-speed" | "wind-deg" | "wind-gust" | "clouds-all" | "weather-id" | "weather-main" | "weather-description" | "weather-icon" | "rain-1h" | "rain-3h" | "snow-1h" | "snow-3h" ) closeScript  }

  // Comment / Descriptions
  commentStart { openScript "comment=" }
  descriptionStart { openScript "description=" }

  // Math - all done separately as different names for clarity and because the end token has to match the start token
  additionStart       { "[+ " }
  subtractionStart    { "[- " }
  multiplicationStart { "[* " }
  divisionStart       { "[/ " }
  moduloStart         { "[% " }
  powerStart          { "[^ " }
  minStart            { "[< " }
  maxStart            { "[> " }
  additionEnd         { "+]" }
  subtractionEnd      { "-]" }
  multiplicationEnd   { "*]" }
  divisionEnd         { "/]" }
  moduloEnd           { "%]" }
  powerEnd            { "^]" }
  minEnd              { "<]" }
  maxEnd              { ">]" }

  // Command starting tokens
  increaseStatStart { openScript "increase the " }
  killStart { openScript "kill " }
  setStatStart { openScript "set the " }
  setStatusStart { openScript "set " }
  impregnateStart { openScript "impregnate " }
  fillPartStart { openScript "fill the " }
  talkScriptStart { openScript "talk " }

  // Lists
  validTargets { "["? ( "player" | "looker" | "victor" | "loser" ) "]"? }
  allBodyParts { "torso" | "head" | "arm" | "leg" | "foot" | "hand" | "wing" | "tail" | "cock" | "cunt" | "ball" | "breast" | "clit" | "udder" | "teat" }
  mutableBodyParts { "arms" | "ass" | "head" | "legs" | "skin" | "torso" | "cock"}
  fillableBodyParts { "ass" | "balls" | "bladder" | "breasts" | "foot" | "hand" | "mouth" | "nipple" }

  // Underlying things
  validCharacter { $[\x21-\x7e] }
  textWithSpaces { ( " " | validCharacter)+ }
  whitespace { " " | "\n" }
  number { @digit+ }
  openScript { "[" }
  closeScript { "]" }
  matchUntilNextCloseScript { ![\]]+  }
  of { " of " }
  by { " by " }
  to { " to "}


}

@external propSource stringParsingHighlighting from "./highlight"

@detectDelim