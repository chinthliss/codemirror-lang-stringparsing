@precedence { nestedScript }

@skip { newLine | space }

@top StringParsing { scriptOrText+ }

scriptOrText { Text | script | "[" | "]" } // Unhighlighted base

ScriptOrText { scriptOrText }

// Parameters (Mostly for highlighting)
NumberOrScript[@isGroup=parameter] { (Number | script) }
Target[@isGroup=parameter] { validTargets }
Number[@isGroup=parameter] { number+ }
FillableBodyPart[@isGroup=parameter] { fillableBodyParts }

script { // Not highlighted because each function should be
  // lookup | math | command | comment | logic
  lookup
}

// Lookups
lookup[@isGroup=lookup] {
  PlayerName | LookerName | VictorName | LoserName | OwnerName | HereName | CommandName | SkinShortDescription | CockShortDescription | CuntShortDescription | PronounOf | SizeOf | SkinOf | CockOf | CuntOf | LengthOf | FormattedLengthOf | NumberOf | DailyCumOf | DailyMilkOf | AdjectiveSizeOf | DescriptionPartOf | TransformDescriptionPartOf | HpOf | InfectionPartsOf | StatusMagnitudeOf | EnvironmentModifier | CityStat | DateTime | MoonPhase | PresentArea | WeatherValue | End | LocalStatOf | AccountStatOf | StatOf | OneOf | RandomNumber | FeralModeOf | UpperCase | LowerCase
}

PronounOf { pronounOfStart ( 'a' | 'A' | 's' | 'S' | 'o' | 'O' | 'p' | 'P' | 'r' | 'R') of validTargets "]" }
SizeOf { "[size" of validTargets "]" }
SkinOf { "[skin" of validTargets "]" }
CockOf { "[cock" of validTargets "]" }
CuntOf { "[cunt" of validTargets "]" }
LengthOf { "[" allBodyParts " length" of validTargets "]" }
FormattedLengthOf { "[formatted " allBodyParts " length" of validTargets "]" }
NumberOf { "[number of " allBodyParts "s of " validTargets "]" }
DailyCumOf { "[daily cum amount of " validTargets "]" }
DailyMilkOf { "[daily milk amount of " validTargets "]" }
AdjectiveSizeOf { "[" ( "breast" | "cock" | "cunt" ) " size" of  validTargets "]" }
DescriptionPartOf { descriptionPartStart mutableBodyParts of ScriptOrText+ "]" }
TransformDescriptionPartOf { "[transform " mutableBodyParts of ScriptOrText+ "]" }
HpOf { "[hp" of validTargets "]" }
InfectionPartsOf { "[the infection " ScriptOrText+ of validTargets "]" }
StatusMagnitudeOf { "[status " ScriptOrText+ of validTargets "]" }
StatOf { "[stat " ScriptOrText+ of validTargets "]" }
LocalStatOf { "[lstat " ScriptOrText+ of validTargets "]" }
AccountStatOf { "[account stat " ScriptOrText+ "]" }
FeralModeOf { "[feral mode" of validTargets "]" }
LowerCase { "[lowercase " ScriptOrText+ "]" }
UpperCase { "[uppercase " ScriptOrText+ "]" }
EnvironmentModifier { "[" ( "heat" | "cold" | "water" | "nanite" ) "]" }
CityStat { "[city stat " ScriptOrText+ "]" }
PresentArea { "[area]" }
DateTime { "[" ( "year" | "month" | "day" | "weekday" | "hour" | "minute" | "systime" ) "]" }
MoonPhase { "[moon phase" " capitalized"? "]" }
WeatherValue { "[weather " ( "id" | "dt" | "name" | "coord-lat" | "coord-lon" | "sys-country" | "sys-sunrise" | "sys-sunset" | "main-temp" | "main-temp_min" | "main-temp_max" | "main-pressure" | "main-sea_level" | "main-grnd_level" | "wind-speed" | "wind-deg" | "wind-gust" | "clouds-all" | "weather-id" | "weather-main" | "weather-description" | "weather-icon" | "rain-1h" | "rain-3h" | "snow-1h" | "snow-3h" ) "]"  }

// Math
math[@isGroup=math] { Addition | Subtraction | Multiplication | Division | Modulo | Power | Min | Max }

Addition { additionStart (NumberOrScript " ")+ additionEnd }
Subtraction { subtractionStart (NumberOrScript " ")+ subtractionEnd }
Multiplication { multiplicationStart (NumberOrScript " ")+ multiplicationEnd }
Division { divisionStart (NumberOrScript " ")+ divisionEnd }
Modulo { moduloStart (NumberOrScript " ")+ moduloEnd }
Power { powerStart (NumberOrScript " ")+ powerEnd }
Min { minStart (NumberOrScript " ")+ minEnd }
Max { maxStart (NumberOrScript " ")+ maxEnd }

// Comments / Descriptions
comment[@isGroup=comment] { Comment | Description }

Comment { commentStart matchUntilNextCloseScript "]" }
Description { descriptionStart matchUntilNextCloseScript "]" }

// Logic
logic[@isGroup=logic] {
  If
}

If {
    StartIf (TextUntil"]" | script) "]"
    scriptOrText+
    EndIf
}

// Commands
command[@isGroup=command] { IncreaseStat | Kill | SetStat | SetStatus | Impregnate | FillPart | TalkScript }
SetStat { setStatStart ScriptOrText+ of Target to NumberOrScript "]" }
SetStatus { setStatusStart ScriptOrText+ status of Target to NumberOrScript magFor Number " rounds]" }
IncreaseStat { increaseStatStart ScriptOrText+ of Target by Number "]" }
Kill { killStart !nestedScript ScriptOrText+ "]" }
Impregnate { impregnateStart Target " with " Target }
FillPart { fillPartStart FillableBodyPart of Target by Number "]" }
TalkScript { talkScriptStart ScriptOrText+ of Target "]" }
OneOf { oneOfStart (ScriptOrText+ oneOfSeparator)+ ScriptOrText+ oneOfEnd }
RandomNumber { randomNumberStart Number to Number "]" }

@tokens {
  // Single word things
  PlayerName { "[player]" }
  LookerName { "[looker]" }
  VictorName { "[victor]" }
  LoserName { "[loser]" }
  OwnerName { "[owner]" }
  HereName { "[here]" }
  CommandName { "[command]" }
  SkinShortDescription { "[skin]" }
  CockShortDescription { "[cock]" }
  CuntShortDescription { "[cunt]" }
  End { "[end]" }

  oneOfStart { "[one of]" }
  oneOfSeparator[@name=Or] { "[or]" }
  oneOfEnd { "[at random]" }

  randomNumberStart { "[random " }

  // Comment / Descriptions
  commentStart { "[comment=" }
  descriptionStart { "[description=" }

  // Math - all done separately as different names for clarity and because the end token has to match the start token
  additionStart       { "[+ " }
  subtractionStart    { "[- " }
  multiplicationStart { "[* " }
  divisionStart       { "[/ " }
  moduloStart         { "[% " }
  powerStart          { "[^ " }
  minStart            { "[< " }
  maxStart            { "[> " }
  additionEnd         { "+]" }
  subtractionEnd      { "-]" }
  multiplicationEnd   { "*]" }
  divisionEnd         { "/]" }
  moduloEnd           { "%]" }
  powerEnd            { "^]" }
  minEnd              { "<]" }
  maxEnd              { ">]" }

  // Lookup starting tokens
  descriptionPartStart { "[desc "}
  pronounOfStart { "[%" }

  // Command starting tokens
  increaseStatStart { "[increase the " }
  killStart { "[kill " }
  setStatStart { "[set the " }
  setStatusStart { "[set " }
  impregnateStart { "[impregnate " }
  fillPartStart { "[fill the " }
  talkScriptStart { "[talk " }

  // Lists
  validTargets { "["? ( "player" | "looker" | "victor" | "loser" ) "]"? }
  allBodyParts { "torso" | "head" | "arm" | "leg" | "foot" | "hand" | "wing" | "tail" | "cock" | "cunt" | "ball" | "breast" | "clit" | "udder" | "teat" }
  mutableBodyParts { "arms" | "ass" | "head" | "legs" | "skin" | "torso" | "cock"}
  fillableBodyParts { "ass" | "balls" | "bladder" | "breasts" | "foot" | "hand" | "mouth" | "nipple" }

  // If
  StartIf { "[if " }
  ElseIf { "[else if " }
  Else { "[else]" }
  EndIf { "[end if]" }

  // Underlying things
  newLine { $[\n] }
  space { " " }
  anyCharacter { $[\x21-\x7e] }
  anyNonControlCharacter { $[\x21-\x5A\x5C\x5E-\x7E] }
  Text { anyNonControlCharacter+ }
  number { @digit+ }
  matchUntilNextCloseScript { ![\]\n ]+ } // For comment blocks

  of { " of " }
  by { " by " }
  to { " to " }
  status { " status " }
  magFor { " mag for " }

  @precedence { of, by, to, status, magFor, Text }

}

@external propSource stringParsingHighlighting from "./highlight"

@detectDelim